# Pre-build Checks
# 1. Unit tests with code coverage (pytest)
# 2. Code quality analysis (flake8)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (copyleft licenses)

name: v2 Pre-build Checks Action (plugin)

inputs:
  branch_to_test:
    description: 'Branch or tag to run test'
    required: true
    default: 'v2.x'
    type: string
  plugin_name:
    description: 'Name of plugin to test'
    required: true
    default: 'accumulated-local-effect'
  algo_name:
    description: 'Name of algo to test'
    required: true
    default: 'accumulated_local_effect'

outputs:
  unit_tests_status:
    value: ${{ env.UNIT_TESTS_STATUS }}
  code_coverage_status: 
    value: ${{ env.CODE_COVERAGE_STATUS }}
  code_quality_status:
    value: ${{ env.CODE_QUALITY_STATUS }}
  dependency_status:
    value: ${{ env.DEPENDENCY_STATUS }}
  license_status:
    value: ${{ env.LICENSE_STATUS }}

runs:
  using: "composite"

  steps:

    - name: Set branch variable
      run: |
        echo "MS_BRANCH=${{ inputs.branch_to_test }}" >> "$GITHUB_ENV"
        echo "PR_NUM=#0" >> "$GITHUB_ENV"
        echo "PLUGIN_NAME=${{ inputs.plugin_name }}" >> "$GITHUB_ENV"
        echo "ALGO_NAME=${{ inputs.algo_name }}" >> "$GITHUB_ENV"
      shell: bash

    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.MS_BRANCH }}
        sparse-checkout: |
          stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
          stock-plugins/user_defined_files
          .ci

    # Setup python    
    - name: Setup python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
        cache-dependency-path: stock-plugins

    # Install dependencies
    - name: Install dependencies
      working-directory: ${{ github.workspace }}/stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
      run: |
        pip install .
        pip install pytest pytest-mock pytest-html pytest-json pytest-cov coverage anybadge
        pip install flake8 flake8-html
      shell: bash

    # Check 1: Unit tests & coverage    
    - name: Unit tests with coverage
      working-directory: ${{ github.workspace }}/stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
      if: ${{ ! cancelled() }}
      run: |      
          set +e
          bash ../../../../.ci/run-test.sh aiverify_${{ env.ALGO_NAME }} -m
          source ../../../../.ci/gen_pre_build_summ.sh test
          test_status=$?
          source ../../../../.ci/gen_pre_build_summ.sh coverage
          coverage_status=$?
          echo "UNIT_TESTS_STATUS=$UNITTEST_SUMMARY" >> $GITHUB_ENV
          echo "CODE_COVERAGE_STATUS=$COVERAGE_SUMMARY" >> $GITHUB_ENV
          set -e
          if [ $test_status -ne 0 ] || [ $coverage_status -ne 0 ]; then
              exit 1
          fi
      shell: bash

    # Check 2: Code quality analysis (flake8)
    - name: Code quality analysis (flake8)
      id: code_quality
      if: ${{ ! cancelled() }}
      working-directory: ${{ github.workspace }}/stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
      run: |
        set +e
        cp ../../../../.ci/.flake8 .
        bash ../../../../.ci/run-flake8.sh aiverify_${{ env.ALGO_NAME }}
        source ../../../../.ci/gen_pre_build_summ.sh lint
        lint_status=$?
        echo "CODE_QUALITY_STATUS=$LINT_SUMMARY" >> $GITHUB_ENV
        set -e
        exit $lint_status
      shell: bash

    # Check 3: Dependency vulnerability & license analysis (pip-audit)
    - name: Dependency analysis (vulnerabilities & licenses)
      id: dependency_analysis
      if: ${{ ! cancelled() }}
      working-directory: ${{ github.workspace }}/stock-plugins/aiverify.stock.${{ env.PLUGIN_NAME }}/algorithms/${{ env.ALGO_NAME }}
      run: |
        set +e
        bash ../../../../.ci/run-pip-audit.sh
        source ../../../../.ci/gen_pre_build_summ.sh dependency
        dep_status=$?
        source ../../../../.ci/gen_pre_build_summ.sh license
        lic_status=$?
        echo "DEPENDENCY_STATUS=$DEPENDENCY_SUMMARY" >> $GITHUB_ENV
        echo "LICENSE_STATUS=$LICENSE_SUMMARY" >> $GITHUB_ENV
        set -e
        if [ $dep_status -ne 0 ] || [ $lic_status -ne 0 ]; then
          exit 1
        fi
      shell: bash

    - name: Capture step statuses
      if: ${{ ! cancelled() }}
      run: |
        echo "UNIT_TESTS_STATUS=${{ steps.unit_tests.outcome }}" >> $GITHUB_ENV
        echo "CODE_QUALITY_STATUS=${{ steps.code_quality.outcome }}" >> $GITHUB_ENV
        echo "DEPENDENCY_ANALYSIS_STATUS=${{ steps.dependency_analysis.outcome }}" >> $GITHUB_ENV
      shell: bash

    # # Send slack notification
    # - name: Send slack notification
    #   if: ${{ ! cancelled() }}
    #   uses: slackapi/slack-github-action@v1.26.0
    #   with:
    #     payload: |
    #       {
    #         "workflow": "${{ github.repository }} | ${{ github.workflow }} | ${{ env.PR_NUM }}",
    #         "status": "${{ job.status }}",
    #         "details": "${{ env.UNIT_TESTS_STATUS }} | ${{ env.CODE_COVERAGE_STATUS }} | ${{ env.CODE_QUALITY_STATUS }} | ${{ env.DEPENDENCY_STATUS }} | ${{ env.LICENSE_STATUS }}",
    #         "ref": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #       }
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

          
