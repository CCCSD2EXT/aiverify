# Pre-build Checks
# 1. Unit tests with code coverage (pytest)
# 2. Code quality analysis (flake8)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (copyleft licenses)

name: v2 Pre-build Checks

env:
  PLUGIN_NAME: 'accumulated-local-effect'
  ALGO_NAMES:  'accumulated_local_effort, robustness-toolbox, shap-toolbox'
  PLUGIN_NAMES: 'accumulated-local-effect, robustness-toolbox, shap-toolbox'
 
  GH_TOKEN: ${{ github.token }}
  

on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [ assigned, synchronize ]
    branches:
      - 'v2.x'
    paths:
      - "stock-plugins/aiverify.stock.accumulated-local-effect/**"

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'v2.x'
        type: string
      plugin_name:
        description: 'Name of plugin to test'
        required: true
        default: $PLUGIN_NAME
      algo_name:
        description: 'Name of algo to test'
        required: true
        default: $ALGO_NAME

  push:
    branches: [ ci/v2-workflows ]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  init-pre-build-checks:
    # Run only when PR is assigned, even on subsequent commits (i.e. synchronize)
    if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:

      - name: Set branch variable (push)
        if: github.event_name == 'push'
        run: |
          echo "BRANCH_TO_TEST=${{ github.ref }}" >> "$GITHUB_ENV"
          echo "PUSH_COMMIT=${{ github.sha }}" >> "$GITHUB_ENV"
          PUSH_FILES=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }} | jq -r '.files[].filename')
          echo "PUSH_FILES=$PUSH_FILES" >> "$GITHUB_ENV"
          echo "Files changed in this push:"
          echo "$PUSH_FILES"

          ALGO_NAMES=(${ALGO_NAMES//,/ })
          PLUGIN_NAMES=(${PLUGIN_NAMES//,/ })
          declare -A ALGO_PLUGIN_MAP

          for file in $PUSH_FILES; do
            for i in "${!ALGO_NAMES[@]}"; do
              if [[ $file == *"${ALGO_NAMES[$i]}"* ]]; then
                ALGO_PLUGIN_MAP["${ALGO_NAMES[$i]}"]="${PLUGIN_NAMES[$i]}"
              fi
            done
          done

          ALGO_TO_TEST=(${!ALGO_PLUGIN_MAP[@]})
          PLUGIN_TO_TEST=(${ALGO_PLUGIN_MAP[@]})

          echo "ALGO_TO_TEST=${ALGO_TO_TEST[*]}" >> "$GITHUB_ENV"
          echo "PLUGIN_TO_TEST=${PLUGIN_TO_TEST[*]}" >> "$GITHUB_ENV"
          echo "Algorithms to test: ${ALGO_TO_TEST[*]}"
          echo "Plugins to test: ${PLUGIN_TO_TEST[*]}"

          echo "branch_to_test=${{ github.ref }}" >> "$GITHUB_OUTPUT"

      - name: Next Step
        run: |
          echo "Next step"

      - name: Prepare matrix for algorithms and plugins to test
        id: prepare_matrix
        run: |
          echo "\"matrix\"={\"algo_name\": [${{ env.ALGO_TO_TEST }}], \"plugin_name\": [${{ env.PLUGIN_TO_TEST }}]}" > matrix.json

      - name: Set up job matrix
        uses: actions/github-script@v4
        id: set-matrix
        with:
          script: |
            const fs = require('fs');
            const matrix = JSON.parse(fs.readFileSync('matrix.json', 'utf8'));
            return matrix;
          result-encoding: string

  run-pre-build-checks:
    needs: init-pre-build-checks
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.init-pre-build-checks.outputs.branch_to_test }}
          sparse-checkout: |
            .github/actions/pre-build-checks-plugin

      - name: Run pre-build checks
        id: pre_build_checks
        uses: ./.github/actions/pre-build-checks-plugin
        with:
          branch_to_test: ${{ needs.pre-build-checks.outputs.branch_to_test }}
          plugin_name: ${{ matrix.plugin_name }}
          algo_name: ${{ matrix.algo_name }}
            
      # - name: Send slack notification
      #   if: ${{ ! cancelled() }}
      #   uses: slackapi/slack-github-action@v1.26.0
      #   with:
      #     payload: |
      #       {
      #         "workflow": "${{ github.repository }} | ${{ github.workflow }} | ${{ needs.pre-build-checks.outputs.PR_NUM }}",
      #         "status": "${{ job.status }}",
      #         "details": "${{ steps.pre_build_checks.outputs.unit_test_status }} | ${{ steps.pre_build_checks.outputs.code_quality_status }} | ${{ steps.pre_build_checks.outputs.dependency_status }} | ${{ steps.pre_build_checks.outputs.license_status }}",
      #         "ref": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_CI }}
