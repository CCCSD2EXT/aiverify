# Smoke Test

name: v2 Smoke Test

on:
  # Runs when a pull request review is being submitted
  pull_request:
    types: [ assigned, synchronize ]
    branches:
      - 'v2.x'

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'v2.x'
        type: string

  push:
    branches: [ v2.x ]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: false

jobs:

  smoke-test:

    #  Run only when PR is approved
    if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: v2.x
          repository: aiverify-foundation/aiverify

      - name: Checkout Smoke Test Code
        uses: actions/checkout@v4
        with:
          ref: v2.x
          repository: aiverify-foundation/smoke-testing
          path: smoke-testing
    
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set ROOT_PATH Variable
        run: |
          echo "ROOT_PATH=${{ github.workspace }}/stock-plugins/user_defined_files" >> $GITHUB_ENV

      - name: Create Zip Test Results using Digital Corruption
        run: |
          cd aiverify-test-engine
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -e .
          cd ${GITHUB_WORKSPACE}
          cd stock-plugins/aiverify.stock.image-corruption-toolbox/algorithms/digital_corruptions/
          pip install -e .
          python -m aiverify_digital_corruptions \
            --data_path ${{ env.ROOT_PATH }}/data/raw_fashion_image_10 \
            --model_path ${{ env.ROOT_PATH }}/pipeline/multiclass_classification_image_mnist_fashion \
            --ground_truth_path ${{ env.ROOT_PATH }}/data/pickle_pandas_fashion_mnist_annotated_labels_10.sav \
            --ground_truth label \
            --model_type CLASSIFICATION \
            --run_pipeline \
            --annotated_ground_truth_path ${{ env.ROOT_PATH }}/data/pickle_pandas_fashion_mnist_annotated_labels_10.sav \
            --set_seed 10 \
            --file_name_label file_name
          cd output
          zip -r digital-corruptions.zip .
          cp digital-corruptions.zip ${GITHUB_WORKSPACE}/smoke-testing/fixtures/
          cd ${GITHUB_WORKSPACE}

      - name: Create Zip Test Results using FMTC Toolbox
        run: |
          cd aiverify-test-engine
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -e .
          cd ${GITHUB_WORKSPACE}
          cd stock-plugins/aiverify.stock.fairness-metrics-toolbox-for-classification/algorithms/fairness_metrics_toolbox_for_classification/
          pip install -e .
          python -m aiverify_fairness_metrics_toolbox_for_classification \
            --data_path ${{ env.ROOT_PATH }}/data/sample_mc_pipeline_toxic_data.sav \
            --model_path ${{ env.ROOT_PATH }}/pipeline/mc_tabular_toxic \
            --ground_truth_path ${{ env.ROOT_PATH }}/data/sample_mc_pipeline_toxic_ytest_data.sav \
            --ground_truth toxic \
            --model_type CLASSIFICATION \
            --run_pipeline \
            --sensitive_features_list gender
          cp output/results.json ${GITHUB_WORKSPACE}/smoke-testing/fixtures/
          deactivate
          cd ${GITHUB_WORKSPACE}

      - name: Install AI Verify Shared Library
        run: |
          cd aiverify-shared-library
          npm ci
          npm run build -y
          cd ${GITHUB_WORKSPACE}

      - name: Install APIGW & Start APIGW
        run: |
          cd aiverify-apigw
          pip install hatch
          hatch shell
          sh ./install-amd64.sh
          npm link aiverify-shared-library
          python3 -m aiverify_apigw &
          cd ${GITHUB_WORKSPACE}

      - name: Install PORTAL
        run: |
          cd aiverify-portal
          npm ci
          npm run dev &
          cd ${GITHUB_WORKSPACE}

      - name: Install Portal & Run Smoke Test
        run: |
          cd smoke-testing
          npm ci
          npx playwright install --with-deps
          URL=http://127.0.0.1:3000 npx playwright test tests/03-smoke.spec.js

      - name: Upload Playwright Traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-trace-v2.0-smoke-testing-${{ github.run_id }}
          path: |
            ${GITHUB_WORKSPACE}/smoke-testing/test-results/
