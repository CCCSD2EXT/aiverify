# Smoke Test

name: v2 Smoke Test

on:
  # Runs when a pull request review is being submitted
  pull_request:
    types: [assigned, synchronize]
    branches:
      - "main"

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: "Branch or tag to run test"
        required: true
        default: "main"
        type: string

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  smoke-test:
    #  Run only when PR is approved
    if: (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          repository: aiverify-foundation/aiverify

      - name: Checkout Smoke Test Code
        uses: actions/checkout@v4
        with:
          ref: main
          repository: aiverify-foundation/aivt-integration-testing
          path: integration-testing

      # - name: Setup Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.11"

      - name: Build & RUN PORTAL, APIGW & Test Engine Worker
        run: |
          echo "Building Python Base Image"
          docker buildx build -t aiverify-python-base -f aiverify-test-engine/Dockerfile --no-cache .
          bash ${GITHUB_WORKSPACE}/.ci/free_disk_space.sh

          cd deployment/docker-compose-dev

          echo "Building & Running Portal, APIGW & Test Engine Worker"
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker compose --profile portal up -d
          bash ${GITHUB_WORKSPACE}/.ci/free_disk_space.sh
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker compose --profile automated-tests-venv up -d
          docker builder prune
          cd ${GITHUB_WORKSPACE}

      # - name: Set ROOT_PATH Variable
      #   run: |
      #     echo "ROOT_PATH=${{ github.workspace }}/stock-plugins/user_defined_files" >> $GITHUB_ENV

      # - name: Install AI Verify Shared Library
      #   run: |
      #     cd aiverify-shared-library
      #     npm install
      #     npm run build
      #     npm link
      #     cd ${GITHUB_WORKSPACE}

      # - name: Install APIGW & Start APIGW
      #   run: |
      #     cd aiverify-apigw
      #     touch .env
      #     echo "MONGODB_URI=mongodb://localhost:27017 \ DB_NAME=aiverify \ PORT=4000" >> .env
      #     python3 -m venv .venv
      #     source .venv/bin/activate
      #     pip install --no-cache-dir torch==2.4.1+cpu --index-url https://download.pytorch.org/whl/cpu
      #     pip install -e ../aiverify-test-engine[all]
      #     pip install -e .
      #     cd aiverify-apigw-node
      #     npm install
      #     npm link aiverify-shared-library
      #     cd ../
      #     python3 -m aiverify_apigw > output.log 2>&1 &
      #     sleep 180
      #     cd ${GITHUB_WORKSPACE}

      # - name: Install PORTAL
      #   run: |
      #     cd aiverify-portal
      #     touch .env
      #     echo "APIGW_HOST=http://localhost:4000" >> .env
      #     npm install
      #     npm run dev > output.log 2>&1 &
      #     cd ${GITHUB_WORKSPACE}

      # - name: Create Zip Test Results using Digital Corruption
      #   run: |
      #     cd aiverify-test-engine
      #     python -m venv .venv2
      #     source .venv2/bin/activate
      #     pip install -e .
      #     cd ${GITHUB_WORKSPACE}
      #     cd stock-plugins/aiverify.stock.image-corruption-toolbox/algorithms/digital_corruptions/
      #     pip install -e .
      #     python -m aiverify_digital_corruptions \
      #       --data_path ${{ env.ROOT_PATH }}/data/raw_fashion_image_10 \
      #       --model_path ${{ env.ROOT_PATH }}/pipeline/sample_fashion_mnist_sklearn \
      #       --ground_truth_path ${{ env.ROOT_PATH }}/data/pickle_pandas_fashion_mnist_annotated_labels_10.sav \
      #       --ground_truth label \
      #       --model_type CLASSIFICATION \
      #       --run_pipeline \
      #       --annotated_ground_truth_path ${{ env.ROOT_PATH }}/data/pickle_pandas_fashion_mnist_annotated_labels_10.sav \
      #       --set_seed 10 \
      #       --file_name_label file_name
      #     cd output
      #     zip -r digital_corruptions.zip .
      #     cp digital_corruptions.zip ${GITHUB_WORKSPACE}/smoke-testing/fixtures/
      #     deactivate
      #     rm -f .venv2
      #     cd ${GITHUB_WORKSPACE}

      # - name: Create Zip Test Results using FMTC Toolbox
      #   run: |
      #     cd aiverify-test-engine
      #     python -m venv .venv2
      #     source .venv2/bin/activate
      #     pip install -e .
      #     cd ${GITHUB_WORKSPACE}
      #     cd stock-plugins/aiverify.stock.fairness-metrics-toolbox-for-classification/algorithms/fairness_metrics_toolbox_for_classification/
      #     pip install -e .
      #     python -m aiverify_fairness_metrics_toolbox_for_classification \
      #       --data_path ${{ env.ROOT_PATH }}/data/sample_mc_pipeline_toxic_data.sav \
      #       --model_path ${{ env.ROOT_PATH }}/pipeline/mc_tabular_toxic \
      #       --ground_truth_path ${{ env.ROOT_PATH }}/data/sample_mc_pipeline_toxic_ytest_data.sav \
      #       --ground_truth toxic \
      #       --model_type CLASSIFICATION \
      #       --run_pipeline \
      #       --sensitive_features_list gender
      #     cp output/results.json ${GITHUB_WORKSPACE}/smoke-testing/fixtures/
      #     deactivate
      #     rm -rf .venv2
      #     cd ${GITHUB_WORKSPACE}

      - name: Run Smoke Test
        run: |
          cd integration-testing
          npm ci
          bash ${GITHUB_WORKSPACE}/.ci/free_disk_space.sh
          npx playwright install --with-deps
          URL=http://127.0.0.1:3000 npx playwright test tests/portal/workflows.spec.js

      # - name: Upload Playwright Traces
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: playwright-trace-v2.0-smoke-testing-${{ github.run_id }}
      #     path: |
      #       ${{ github.workspace }}/smoke-testing/test-results/

      # - name: APIGW Logs
      #   if: always()
      #   run: |
      #     cat ${GITHUB_WORKSPACE}/aiverify-apigw/output.log

      # - name: PORTAL Logs
      #   if: always()
      #   run: |
      #     cat ${GITHUB_WORKSPACE}/aiverify-portal/output.log
