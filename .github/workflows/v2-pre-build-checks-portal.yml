# Pre-build Checks (Portal)
# 1. Unit tests with code coverage (jest)
# 2. Code quality analysis (lint)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (undesirable licenses)

name: v2 Pre-build Checks (portal)

env:
  NEXT_PUBLIC_APIGW_HOST: 'http://127.0.0.1:4000'
  APIGW_HOST: 'http://host.docker.internal:4000'

on:
  # Runs when a pull request to main is being assigned
  pull_request:
    types: [assigned, synchronize]
    branches:
      - "main"
    paths:
      - "aiverify-portal/**"
      - "aiverify-shared-library/**"

  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      branch_to_test:
        description: 'Branch or tag to run test'
        required: true
        default: 'main'
        type: string

  push:
    branches: [ci/pre-build-check-2]

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true
  
jobs:
  
    pre-build-checks:
      # Run only when PR is assigned, even on subsequent commits (i.e. synchronize)
      if: (github.event_name == 'pull_request' && github.event.pull_request.assignee != null) || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
      runs-on: ubuntu-latest    
      timeout-minutes: 40
  
      steps:
  
        - name: Set env variables
          run: |
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "BRANCH_TO_TEST=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
              echo "PR_NUM=#${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            elif [ "${{ github.event_name }}" == "push" ]; then
              echo "BRANCH_TO_TEST=${{ github.ref }}" >> $GITHUB_ENV
              echo "PR_NUM=#000" >> "$GITHUB_ENV"
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "BRANCH_TO_TEST=${{ inputs.branch_to_test }}" >> $GITHUB_ENV
              echo "PR_NUM=#000" >> "$GITHUB_ENV"
            fi
            echo "WDIR=aiverify-portal" >> $GITHUB_ENV
            echo "CI_DIR=../.ci" >> $GITHUB_ENV
  
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            ref: ${{ env.BRANCH_TO_TEST }}
            sparse-checkout: |
              aiverify-portal
              aiverify-shared-library
              common
              .ci
    
        - name: Setup Node.js 23
          uses: actions/setup-node@v4
          with:
            node-version: '23'
            cache: 'npm'
            cache-dependency-path: aiverify-portal

        - name: Install dependencies for shared-library
          working-directory: ${{ github.workspace }}/aiverify-shared-library
          run: |
            npm install --omit=dev
            npx license-checker --summary --out licenses-found.txt -y
            npm install -D
            npm run build

        - name: Install dependencies for portal
          working-directory: ${{ github.workspace }}/aiverify-portal
          run: |
            npm install --omit=dev
            npx license-checker --summary --out licenses-found.txt -y
            npm install -D
            npm i -D eslint-formatter-html
            npm link ../aiverify-shared-library

        # Compile typescript source files
        - name: Build portal (next build)
          working-directory: ${{ github.workspace }}/aiverify-portal
          run: |
            # cp .env.development .env
            npm run build

        # Format check
        - name: Format check
          if: ${{ ! cancelled() }}
          working-directory: ${{ github.workspace }}/aiverify-portal
          run: |
            # npm run format-check
            npx prettier --check .

        # Unit Tests & Coverage
        - name: Unit tests with coverage
          if: ${{ ! cancelled() }}
          working-directory: ${{ github.workspace }}/aiverify-portal
          timeout-minutes: 30
          run: |
            set +e
            sudo timedatectl set-timezone Asia/Singapore
            # npm run coverage
            npx jest --silent
            exit_code_jest=$?
            echo "########### Unit Test Summary ###########"
            total_tests=$(npx jest --json --silent | jq '.numTotalTests')
            failed_tests=$(npx jest --json --silent | jq '.numFailedTests')
            passed_tests=$(npx jest --json --silent | jq '.numPassedTests')
            printf "Passed: %s\n" "$passed_tests"
            printf "Failed: %s\n" "$failed_tests"
            printf "Total:  %s\n" "$total_tests"
            echo "#########################################"
            if [ -f coverage/coverage-summary.json ]; then
              coverage_pct=$(jq '.total.lines.pct' coverage/coverage-summary.json)
              echo "########### Code Coverage Summary ###########"
              echo "Line Coverage: $coverage_pct%"
              echo "#############################################"
            fi
            set -e
            if [ $exit_code_jest -ne 0 ]; then
              echo "jest failed, exiting..."
              exit $exit_code_jest
            fi

        # eslint
        - name: Code quality analysis - lint
          if: ${{ ! cancelled() }}
          working-directory: ${{ github.workspace }}/aiverify-portal
          run: |
            set +e
            npm run lint
            exit_code_lint=$?
            # npm run lint-html-report
            # npm run lint-json-report
            npx next lint --format html > eslint-report.html
            npx next lint --format json > eslint-report.json

            # ANSI color codes
            RED='\033[0;31m'
            ORANGE='\033[0;33m'
            GREEN='\033[0;32m'
            RESET='\033[0m'

            # Parse JSON report for errors and warnings
            total_errors=$(jq '[.[].errorCount] | add // 0' eslint-report.json)
            total_warnings=$(jq '[.[].warningCount] | add // 0' eslint-report.json)

            echo "########### Lint Summary ###########"
            if [ "$total_errors" -gt 0 ]; then
              printf "${RED}Errors: %s${RESET}\n" "$total_errors"
            else
              printf "${GREEN}Errors: %s${RESET}\n" "$total_errors"
            fi
            if [ "$total_warnings" -gt 0 ]; then
              printf "${ORANGE}Warnings: %s${RESET}\n" "$total_warnings"
            else
              printf "${GREEN}Warnings: %s${RESET}\n" "$total_warnings"
            fi
            echo "####################################"

            set -e
            if [ $exit_code_lint -ne 0 ]; then
              echo "lint failed, exiting..."
              exit $exit_code_lint
            fi

        # npm audit
        - name: Dependency analysis - vulnerabilities & licenses
          if: ${{ ! cancelled() }}
          working-directory: ${{ github.workspace }}/aiverify-portal
          run: |
            set +e
            audit_json="audit.json"
            npm audit --omit=dev --json > $audit_json
            exit_code_audit=$?

            echo "########### Vulnerability Details ###########"
            jq -r '
              .vulnerabilities | to_entries[] |
              .key as $pkg |
              .value.via[]? | select(type == "object" and .title != null) |
              "\($pkg) - \(.severity): \(.title)"' $audit_json
            echo "############################################"

            # ANSI color codes
            RED='\033[0;31m'
            ORANGE='\033[0;33m'
            GREEN='\033[0;32m'
            RESET='\033[0m'

            critical_count=$(jq '[.vulnerabilities[] | select(.severity=="critical")] | length' $audit_json)
            high_count=$(jq '[.vulnerabilities[] | select(.severity=="high")] | length' $audit_json)
            medium_count=$(jq '[.vulnerabilities[] | select(.severity=="moderate")] | length' $audit_json)

            # Vulnerability summary with color and block markers
            echo "########### Vulnerability Summary ###########" > vuln-summary.txt
            if [ "$critical_count" -gt 0 ]; then
              printf "${RED}Critical: %s${RESET}\n" "$critical_count" >> vuln-summary.txt
            else
              printf "${GREEN}Critical: %s${RESET}\n" "$critical_count" >> vuln-summary.txt
            fi
            if [ "$high_count" -gt 0 ]; then
              printf "${ORANGE}High: %s${RESET}\n" "$high_count" >> vuln-summary.txt
            else
              printf "${GREEN}High: %s${RESET}\n" "$high_count" >> vuln-summary.txt
            fi
            if [ "$medium_count" -gt 0 ]; then
              printf "${ORANGE}Medium: %s${RESET}\n" "$medium_count" >> vuln-summary.txt
            else
              printf "${GREEN}Medium: %s${RESET}\n" "$medium_count" >> vuln-summary.txt
            fi
            echo "############################################" >> vuln-summary.txt
            cat vuln-summary.txt

            # License summary block with color and block markers
            echo -e "########### License Check Summary for portal ###########\n" > license-report.txt
            cat licenses-found.txt >> license-report.txt
            echo -e "\n########### License Check Summary for shared-library ###########\n" >> license-report.txt
            cat ../aiverify-shared-library/licenses-found.txt >> license-report.txt

            strong_copyleft_count=$(grep -iE 'GPL|AGPL|Affero|CeCILL' licenses-found.txt | wc -l)
            weak_copyleft_count=$(grep -iE 'LGPL|MPL|CDDL' licenses-found.txt | wc -l)

            echo -e "\n########### Copyleft License Summary ###########" >> license-report.txt
            if [ "$strong_copyleft_count" -gt 0 ]; then
              printf "${RED}Strong copyleft: %s${RESET}\n" "$strong_copyleft_count" >> license-report.txt
            else
              printf "${GREEN}Strong copyleft: %s${RESET}\n" "$strong_copyleft_count" >> license-report.txt
            fi
            if [ "$weak_copyleft_count" -gt 0 ]; then
              printf "${ORANGE}Weak copyleft: %s${RESET}\n" "$weak_copyleft_count" >> license-report.txt
            else
              printf "${GREEN}Weak copyleft: %s${RESET}\n" "$weak_copyleft_count" >> license-report.txt
            fi
            echo "############################################" >> license-report.txt
            cat license-report.txt

            # Append vulnerability summary block to license report
            echo -e "\n########### Vulnerability Summary ###########" >> license-report.txt
            tail -n +2 vuln-summary.txt | head -n -1 >> license-report.txt
            echo "############################################" >> license-report.txt

            cp license-report.txt licenses-found.txt
            set -e
            if [ $exit_code_audit -ne 0 ]; then
              echo "npm audit failed, exiting..."
              exit $exit_code_audit
            fi

        # ### Publish reports to ci dashboard ###

        # - name: Checkout dashboard
        #   if: ${{ github.event.pull_request.head.repo.full_name == github.repository && always() }}
        #   uses: actions/checkout@v3
        #   with:
        #     repository: aiverify-foundation/ci-dashboard
        #     token: ${{ secrets.CHECKOUT_TOKEN }}
        #     ref: main
        #     path: check-results

        # - name: Push results to dashboard
        #   if: ${{ github.event.pull_request.head.repo.full_name == github.repository && always() }}
        #   working-directory: ${{ github.workspace }}/check-results
        #   run: |
        #     set +e
        #     find ../ -type f -name ".gitignore" -exec rm {} +
        #     [ -d "docs/pre-merge/portal" ] && rm -rf docs/pre-merge/portal
        #     mkdir -p docs/pre-merge/portal
        #     mv ../ai-verify-portal/coverage docs/pre-merge/portal/
        #     mv ../ai-verify-portal/*.svg docs/pre-merge/portal/
        #     mv ../ai-verify-portal/*.html docs/pre-merge/portal/
        #     mv ../ai-verify-portal/*.md docs/pre-merge/portal/
        #     mv ../ai-verify-portal/*.txt docs/pre-merge/portal/
        #     git add docs/pre-merge/portal
        #     git config user.name "aiverify"
        #     git config user.email "aiverify@imda.gov.sg"
        #     git commit -m "feat(portal) actions publish portal reports to dashboard"
        #     git push
        #     set -e
